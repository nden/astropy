.. _whatsnew-4.0:

**************************
What's New in Astropy 4.0?
**************************

Overview
========

Astropy 4.0 is a major release that ...  since
the 3.2.x series of releases.

In particular, this release includes:

*
*

In addition to these major changes, Astropy v4.0 includes a large number of
smaller improvements and bug fixes, which are described in the
:ref:`changelog`. By the numbers:

* xxx issues have been closed since v3.2
* xxx pull requests have been merged since v3.2
* xxx distinct people have contributed code


Pre-publication Planck 2018 cosmological parameters
---------------------------------------------------

A pre-publication version of the Planck 2018 cosmological parameters
has been included based on version 2 of the submitted paper.  This
will be replaced with a final version when the paper is accepted.

.. doctest-requires:: scipy
  >>> from astropy.cosmology import Planck18_arXiv_v2
  >>> Planck18_arXiv_v2.age(0)  # doctest: +FLOAT_CMP
  <Quantity 13.7868853 Gyr>


New models
----------

.. Blackbody changes
.. Drude1D
.. Analytical King
.. Exponential1D and Logarithmic1D


New functions/modes for combining tables
----------------------------------------

.. dstack
.. cartesian join

Consistency of physical constants and units
-------------------------------------------


Updates to Galactocentric frame
-------------------------------

Most coordinate frames implemented in :ref:`astropy.coordinates
<astropy-coordinates>` have standard parameters that are set by IAU consensus
(e.g., the ``ICRS`` frame). Unlike these, the
`~astropy.coordinates.Galactocentric` coordinate frame does not have an absolute
definition: Its parameters (the solar motion and position relative to the
Galactic center) are measurements that continue to be refined as newer stellar
surveys are executed and analyzed. When it was added, the default parameter
values used by the `~astropy.coordinates.Galactocentric` frame — i.e. the
parameter values assumed when defining a frame without explicitly setting
values, like ``galcen = Galactocentric()`` — were set to commonly-used values at
the time, but these are now somewhat out of date. With v4.0, we have added
functionality for globally controlling the default parameter values used by this
frame by setting the `~astropy.coordinates.galactocentric_frame_defaults` object
with the name of a parameter set. The parameter set names can currently be one
of ``"pre-v4.0"`` (to get the original, pre-version-4.0 values of the parameters),
``"v4.0"`` (to get a more modern set of values adopted in v4.0), and ``"latest"``
(which is currently an alias for ``"v4.0"`` and will always alias the most recent
set of parameters).

If your code depends sensitively on the choice of
`~astropy.coordinates.Galactocentric` frame parameters, make sure to explicitly
set the parameter set in your code, for example, after importing
:ref:`astropy.coordinates <astropy-coordinates>`::

    >>> import astropy.coordinates as coord
    >>> coord.galactocentric_frame_defaults.set('v4.0')  # doctest: +IGNORE_OUTPUT

The `~astropy.coordinates.Galactocentric` frame now also maintains a list of
references to scientific papers for the default values of the frame attributes.
For example, after adopting the v4.0 parameter set and defining a frame, we can
retrieve the references (as a dictionary of links to ADS) for the parameters
using the ``.frame_attribute_references`` attribute::

    >>> import astropy.coordinates as coord
    >>> coord.galactocentric_frame_defaults.set('v4.0')  # doctest: +IGNORE_OUTPUT
    >>> galcen = coord.Galactocentric()
    >>> galcen  # doctest: +FLOAT_CMP
    <Galactocentric Frame (galcen_coord=<ICRS Coordinate: (ra, dec) in deg
        (266.4051, -28.936175)>, galcen_distance=8.122 kpc, galcen_v_sun=(12.9, 245.6, 7.78) km / s, z_sun=20.8 pc, roll=0.0 deg)>
    >>> galcen.frame_attribute_references
    {'galcen_coord': 'http://adsabs.harvard.edu/abs/2004ApJ...616..872R',
     'galcen_distance': 'https://ui.adsabs.harvard.edu/abs/2018A%26A...615L..15G',
     'galcen_v_sun': ['https://ui.adsabs.harvard.edu/abs/2018RNAAS...2..210D',
      'https://ui.adsabs.harvard.edu/abs/2018A%26A...615L..15G',
      'https://ui.adsabs.harvard.edu/abs/2004ApJ...616..872R'],
     'z_sun': 'https://ui.adsabs.harvard.edu/abs/2019MNRAS.482.1417B'}

Note, however, if a frame parameter is set by the user, it is removed from the
reference list::

    >>> import astropy.units as u
    >>> galcen = coord.Galactocentric(z_sun=10*u.pc)
    >>> galcen.frame_attribute_references
    {'galcen_coord': 'http://adsabs.harvard.edu/abs/2004ApJ...616..872R',
     'galcen_distance': 'https://ui.adsabs.harvard.edu/abs/2018A%26A...615L..15G',
     'galcen_v_sun': ['https://ui.adsabs.harvard.edu/abs/2018RNAAS...2..210D',
      'https://ui.adsabs.harvard.edu/abs/2018A%26A...615L..15G',
      'https://ui.adsabs.harvard.edu/abs/2004ApJ...616..872R']}

More information can be found in the documentation for the frame class:
`~astropy.coordinates.Galactocentric`.


New ``ymdhms`` Time format
--------------------------


New context manager for plotting Time values
--------------------------------------------

Matplotlib natively provides a mechanism for plotting dates and times on one
or both of the axes, as described in
`Date tick labels <https://matplotlib.org/3.1.0/gallery/text_labels_and_annotations/date.html>`_.
To make use of this, you can use the ``plot_date`` attribute of :class:`~astropy.time.Time` to get
values in the time system used by Matplotlib.

However, in many cases, you will probably want to have more control over the
precise scale and format to use for the tick labels, in which case you can make
use of the `~astropy.visualization.time_support` function which can be called
either directly or as a context manager, and after which :class:`~astropy.time.Time` objects can be
passed to matplotlib plotting functions. The axes are then automatically labeled
with times formatted using the :class:`~astropy.time.Time` class:

.. plot::
   :include-source:
   :context: reset

    >>> from matplotlib import pyplot as plt
    >>> from astropy.time import Time
    >>> from astropy.visualization import time_support
    >>> time_support(format='isot', scale='tai')  # doctest: +IGNORE_OUTPUT
    >>> plt.figure(figsize=(5,3))  # doctest: +IGNORE_OUTPUT
    >>> plt.plot(Time([52000, 53000, 54000], format='mjd'), [1.2, 3.3, 2.3])  # doctest: +IGNORE_OUTPUT

For more information, see :ref:`plotting-times`.

Support for parsing high-precision values with Time
---------------------------------------------------


Improved compatibility of Quantity objects with Numpy functions
---------------------------------------------------------------


Plotting 1-d profile plots with WCSAxes
---------------------------------------


Default labelling with WCSAxes
------------------------------


New function to fit WCS to pairs of pixel/world coordinates
-----------------------------------------------------------


Support for WCS transformations between pixel and Time values
-------------------------------------------------------------

The :meth:`WCS.world_to_pixel <astropy.wcs.WCS.world_to_pixel>` and
:meth:`WCS.pixel_to_world <astropy.wcs.WCS.pixel_to_world>` methods can now
take and return :class:`~astropy.time.Time` objects for WCS transforamtions
that involve time::

    >>> from astropy.io import fits
    >>> from astropy.wcs import WCS
    >>> header = fits.Header()
    >>> header['CTYPE1'] = 'TIME'
    >>> header['CDELT1'] = 86400.
    >>> header['MJDREF'] = 58788.
    >>> wcs = WCS(header)
    >>> wcs.pixel_to_world([2, 3, 4])
    <Time object: scale='utc' format='mjd' value=[58791. 58792. 58793.]>
    >>> wcs.world_to_pixel(Time('2019-11-02T10:30:22'))
    array(0.43775463)

Improvements to folding for time series
---------------------------------------

The :meth:`TimeSeries.fold <astropy.timeseries.TimeSeries.fold>` method now
includes more options for controlling the resulting phase values. First, the
``midpoint_epoch`` argument has been renamed to ``epoch_time`` so as to be more
general, and the ``epoch_phase`` can be used to specify the phase at which the
epoch is given. In addition, a new ``wrap_phase`` argument can be used to
specify at what phase to wrap - for example if this is set to half the period,
the resulting phase will go from minus half the period to half the period,
whereas if it is set to the period the resulting phase will go from zero to the
period::

    >>> from astropy import units as u
    >>> from astropy.timeseries import TimeSeries
    >>> ts = TimeSeries(time_start='2019-11-01T00:00:00', time_delta=0.3 * u.day,
    ...                 n_samples=10)
    >>> tf1 = ts.fold(1 * u.day, epoch_time='2019-11-01T12:00:00',
    ...               wrap_phase=1 * u.day)
    >>> tf1  # doctest: +FLOAT_CMP
    <TimeSeries length=10>
            time
           object
    -------------------
                    0.5
                    0.8
                    0.1
                    0.4
                    0.7
                    0.0
                    0.3
                    0.6
                    0.9
                    0.2

Finally, the new ``normalize_phase`` keyword argument can be used to
specify whether the final phase should be a relative time or whether it should
be normalized to a dimensionless value in the range 0 to 1::

    >>> tf2 = ts.fold(1 * u.day, epoch_time='2019-11-01T12:00:00',
    ...               normalize_phase=True)
    >>> tf2  # doctest: +FLOAT_CMP
    <TimeSeries length=10>
            time
    <BLANKLINE>
          float64
    -------------------
                   -0.5
                   -0.2
                    0.1
                    0.4
                   -0.3
                    0.0
                    0.3
                   -0.4
                   -0.1
                    0.2

Support for surface brightnesses in spectral_density equivalencies
------------------------------------------------------------------


New cache import/export utilities
---------------------------------


Performance improvements for tables
-----------------------------------


Improved handling of leap second updates
----------------------------------------

.. custom IERS table
.. LeapSecond class


API changes in astropy.modeling
-------------------------------

.. changes for compound models


Full change log
===============

To see a detailed list of all changes in version v4.0, including changes in
API, please see the :ref:`changelog`.


Renamed/removed functionality
=============================
